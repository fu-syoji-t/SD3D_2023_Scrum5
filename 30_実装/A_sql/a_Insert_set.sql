INSERT INTO `users`     (`user_loginid`,
                         `user_password`,
                         `user_name`,
                         `user_course`,
                         `user_major`,
                         `user_grade`,
                         `user_classname`,
                         `user_Fsubject`)
                VALUES  ('sd3dmasayosi',
                         '$2y$10$.0jO8sSywj5wdmyyoPrwPOevj5.KcHJSPUO9DSjfphO...',
                         'いのうえまさよし',
                         '情報システム専攻科',
                         'システムエンジニアコース',
                         '3',
                         'SD3D',
                         'Webプログラミング演習Ⅲ'),
                        ('sd3dreo',
                         '$2y$10$T6.S4FrVMJvE14eHMcrQX.P6omZTQQpKZH2u7dKIXhO...',
                         'よねだれお',
                         '情報システム専攻科',
                         'システムエンジニアコース',
                         '1',
                         'IT1D',
                         'なし'),
                        ('sd3dryuusei',
                         '$2y$10$jrAVLG7GmAxYU0JJyBTRAeSYrImtqOsjIFMxrOsxfHI...',
                         'うちやまりゅうせい',
                         '情報システム専攻科',
                         'システムエンジニアコース',
                         '3',
                         'SD3D',
                         'テスト技法'),
                        ('sd3dryou',
                         '$2y$10$egTK8tDdab8UlW.NpsMiFuasANFmLPfscfSmMlnyWV....',
                         'のむらりょう',
                         '情報システム専攻科',
                         'システムエンジニアコース',
                         '2',
                         'SD2D',
                         'システム設計'),
                        ('sd3dtakayuki',
                         '$2y$10$Q3qBW7ks/u5Pp6j7fpC2xegDEmndp9DyWU5q/v.TDXh...',
                         'えはらたかゆき',
                         '情報システム専攻科',
                         'システムエンジニアコース',
                         '1',
                         'IT1D',
                         'ビジネスソフトウェア演習');

INSERT INTO `evaluation`(`user_id`,
                         `evaluation_trp`,
                         `evaluation_receivednum`,
                         `evaluation_receivedvalue`,
                         `evaluation_sentnum`,
                         `evaluation_sentvalue`) 
                VALUES  ( 1,   100, 10,  30, 10,  50),
                        ( 2,   200, 20,  70, 20,  90),
                        ( 3,   400, 30, 110, 30, 130),
                        ( 4,   800, 40, 150, 40, 160),
                        ( 5,  1600, 50, 200, 50, 180);

INSERT INTO `posts`     (`user_id`,
                         `post_flag`,
                         `post_date`,
                         `post_title`,
                         `post_subject`,
                         `post_text`) 
                VALUES  (5,
                         0,
                         '2023-05-30-16-40-19',
                         '誰か俺の分の課題もやってもらえませんか',
                         'Webプログラミング演習I',
                         'だるいんでやってもらって。評価は全部満点にしやす。'),
                        (4,
                         1,
                         '2023-06-01-10-30-28',
                         'このコードもっといい書き方ありますか？',
                         'Atcoder',
                         'この問題のアルゴリズムを書いてとりあえず動きましたが、もっといい書き方があれば知りたいです！！'),
                        (4,
                         1,
                         '2023-06-02-14-22-36',
                         '資料通りにやってもなりません',
                         'フロントエンド演習B',
                         '資料通りにコードを書きましたが動きません。どこか間違ってますか？これ');

/*
INSERT INTO `post_files`(`post_file_id`,
                         `post_id`,
                         `post_file_path`)
                VALUES  (1,1,''),
                        (2,2,''),
                        (3,3,'');

INSERT INTO `post_images`(`post_image_id`,
                          `post_id`,
                          `post_image_path`)
                VALUES   (1,1,''),
                         (2,2,''),
                         (3,3,'');
*/     

INSERT INTO `replies`   (`post_id`,
                         `user_id`,
                         `reply_date`,
                         `reply_text`)
                VALUES  (1,
                         1,
                         '2023-05-30-17-10-55',
                         'くれてやる'),
                        (1,
                         2,
                         '2023-05-30-17-44-44',
                         '評価よろしく！'),
                        (1,
                         3,
                         '2023-05-30-18-01-11',
                         '僕も欲ちぃ'),
                        (2,
                         3,
                         '2023-06-02-12-50-09',
                         'オセロ（リバーシ）ゲームをプログラミングするアルゴリズムを説明します。以下の手順を参考にしてください。
                         ゲーム盤の作成: オセロのゲーム盤は通常、8x8 の格子状になっています。この盤を表すデータ構造（例: 2次元配列）を作成します。初期状態では、中央に4つの石を配置します（通常、黒石と白石が交互に配置されます）。
                        石の配置: プレイヤーが石を配置するための入力を待ちます。石の配置は盤上の座標（行と列）で指定されます。プレイヤーが石を置くと、その位置の石の状態を更新します。
                        石のひっくり返し: 石を置いた後、その石によって相手の石をひっくり返す必要があるかどうかをチェックします。指定した位置に石を置いた後、8方向（上下左右および4つの斜め方向）に対して、
                        隣接する相手の石があるかどうかを確認します。隣接する相手の石の列または行が、自分の石で挟まれている場合、その間の相手の石を自分の石にひっくり返します。
                        ターンの切り替え: プレイヤー間でターンを交互に切り替えます。石の配置と石のひっくり返しの手順を交互に繰り返します。
                        ゲームの終了条件の確認: ゲームが終了したかどうかを確認します。終了条件の例としては、盤上に石を置ける場所がない場合や、盤面が全て埋まった場合があります。終了条件が満たされた場合、得点を計算して勝者を判定します。
                        勝者の表示: ゲームの結果を表示し、勝者を宣言します。
                        以上が基本的なオセロゲームのアルゴリズムです。プログラミング言語によって具体的な実装方法は異なりますが、このアルゴリズムを参考にしてゲームを作成することができます。必要に応じて、ユーザー入力の処理やGUIの実装などを追加することもできます。
                        石の配置の検証: プレイヤーが石を配置する前に、その場所が有効な配置場所であるかどうかを検証します。有効な配置場所は、以下の条件を満たす必要があります:
                        - 配置場所が盤上にあり、空白であること
                        - 配置場所の周囲に相手の石が存在し、その方向に自分の石が挟まれること
                        もしプレイヤーが有効な配置場所を選択しない場合、再度入力を促す必要があります。石のひっくり返しの検証: 石を配置した後、その石によって相手の石をひっくり返す必要があるかどうかを検証します。
                        配置された石から8方向（上下左右および4つの斜め方向）に対して、隣接する相手の石があるかどうかを確認します。隣接する相手の石の列または行が、自分の石で挟まれている場合、その間の相手の石を自分の石にひっくり返します。
                        石の数のカウント: ゲームが進行するごとに、盤上の各プレイヤーの石の数をカウントします。石の数は、ゲームの終了条件の判定や最終的な勝者の決定に使用されます。
                        ゲーム終了条件の確認: ゲームが終了したかどうかを確認します。終了条件の例としては、以下のいずれかが該当します:
                        - 盤上に石を置ける場所がない（プレイヤーの手番がスキップされる）
                        - 盤面が全て埋まった
                        - 両プレイヤーが石を置けなくなった（石の配置とひっくり返しの検証で両方のプレイヤーが有効な手を選択できない）
                        勝者の判定と表示: ゲームが終了した場合、得点を計算して勝者を判定します。得点は、各プレイヤーの石の数であり、石の数が多い方が勝者となります。得点が同じ場合は引き分けとなります。
                        最終的な結果と勝者を表示します。オセロ（リバーシ）ゲームをプログラミングする際の注意点は以下の通りです。
                        アルゴリズムの理解: ゲームのルールやアルゴリズムを十分に理解することが重要です。オセロのルールや石のひっくり返しの手順など、ゲームの要素を正確に把握しましょう。
                        データ構造の設計: ゲーム盤を表すデータ構造を適切に設計する必要があります。通常、2次元配列を使用して盤面を表現します。盤面の状態や石の配置情報を効率的に管理できるようにしましょう。
                        UIの実装: プレイヤーが石を配置するためのUI（ユーザーインターフェース）を実装する必要があります。ボードの表示やマウスやキーボードなどの入力を受け付ける機能を備えたUIを作成しましょう。
                        有効な手の判定: プレイヤーが有効な手を選択しているかどうかを判定する必要があります。配置場所が盤上にあり、空白であり、自分の石で相手の石を挟むことができるかを検証しましょう。
                        石のひっくり返し: 石を配置した後、相手の石をひっくり返す必要があります。配置された石から8方向に対して、隣接する相手の石が挟まれているかどうかを確認し、ひっくり返す処理を実装しましょう。
                        ターンの切り替え: プレイヤー間でターンを交互に切り替える必要があります。プレイヤーの入力と石のひっくり返しの手順を交互に実行し、ゲームの進行を管理しましょう。
                        ゲーム終了条件の判定: ゲームが終了したかどうかを判定する必要があります。終了条件は、盤上に石を置ける場所がない場合や盤面が全て埋まった場合などです。終了条件の判定を正確に行い、ゲームの終了時の処理を実装しましょう。
                        勝者の判定: ゲーム終了時に勝者を判定する必要があります。石の数を数えて得点を計算し、得点が多い方を勝者として表示する処理を実装しましょう。同点の場合は引き分けとして処理する必要があります。
                        エラーハンドリング: ユーザーの入力や処理中に発生する可能性のあるエラーに対処するエラーハンドリング機能を実装しましょう。適切なエラーメッセージを表示して、プログラムの安定性を確保しましょう。
                        テストとデバッグ: プログラムを適切にテストし、バグや不具合を見つけて修正する必要があります。各機能や条件に対してテストケースを用意し、ゲームの正常な動作を確認しましょう。
                        これらの注意点を踏まえながら、オセロゲームをプログラミングしてください。プログラミング言語やフレームワークに応じて、具体的な実装方法は異なる場合があります。
                        アルゴリズムのプログラミングを上達させるためには、以下の方法を取り入れることが有効です。
                        アルゴリズムの理解と学習: アルゴリズムの基本的な概念やデータ構造、制御フローなどを理解することが重要です。アルゴリズムの教科書やオンラインの学習資料を活用し、基礎知識を身につけましょう。
                        問題解決の練習: プログラミング言語を使って、様々な問題を解決する練習を行いましょう。プログラミングコンテストやオンラインジャッジなどのプラットフォームを利用すると、さまざまなレベルの問題に挑戦できます。
                        実践的なプロジェクト: 実際のプロジェクトに取り組むことで、アルゴリズムの実装力を向上させることができます。例えば、ゲームやアプリケーションの開発など、具体的な目標を持ったプロジェクトに挑戦してみましょう。
                        コードの可読性と効率性の向上: アルゴリズムを実装する際には、コードの可読性と効率性にも注意を払いましょう。意図が明確に表現されたコードは、自身や他の人が後から読みやすくなります。
                        また、アルゴリズムの効率性を向上させるために、最適なデータ構造やアルゴリズムを選択することも重要です。
                        アルゴリズムの実装とテスト: 学んだアルゴリズムを実際にコードとして実装し、テストケースを用いて動作を確認しましょう。デバッグやエラーの修正を通じて、アルゴリズムの挙動を理解することができます。
                        コードのリファクタリングと改善: 実装したコードを定期的に見直し、リファクタリングや改善を行いましょう。コードの見直しは自身の成長に繋がり、より洗練されたアルゴリズムを作成することができます。
                        チームでの協力とフィードバック: アルゴリズムのプログラミングを上達させるためには、他のプログラマーやエンジニアとの協力やフィードバックを受けることも重要です。コーディングのレビューやディスカッションを通じて、新たな視点やアイデアを得ることができます。
                        継続的な学習と情報収集: アルゴリズムのプログラミングは常に進化している分野です。新しいアルゴリズムやテクニックについて学び続け、情報を収集することで、自身のスキルを向上させることができます。
                        問題解決能力の開発: アルゴリズムのプログラミングにおいては、問題解決能力が重要です。問題を細かく分解し、適切なアルゴリズムを選択する能力を養いましょう。実際の課題に取り組むことで、問題解決能力を向上させることができます。
                        コミュニティやオンラインリソースの活用: アルゴリズムのプログラミングにおいては、コミュニティやオンラインリソースの活用が役立ちます。プログラミングフォーラムやQ&Aサイト、学習プラットフォームなどで他の人との交流を深め、知識や経験を共有しましょう。
                        これらの方法を組み合わせて実践することで、アルゴリズムのプログラミングスキルを上達させることができます。継続的な学習と積極的な取り組みが重要ですので、自身の目標に向かって努力を続けましょう。'),
                        (2,
                         2,
                         '2023-06-02-14-29-33',
                         'こちらでどうじゃ？'),
                        (3,
                         1,
                         '2023-06-02-15-10-57',
                         '先生が資料には書いてないけど必要なことを授業内で言ってました。
                         画像を参考にやってみてください。');

/*
INSERT INTO `reply_files`(`reply_file_id`,
                          `reply_id`,
                          `reply_file_path`)
                VALUES   (1,1,''),
                         (2,2,''),
                         (3,3,''),
                         (4,4,''),
                         (5,5,''),
                         (6,6,'');

INSERT INTO `reply_images`(`reply_image_id`,
                           `reply_id`,
                           `reply_image_path`)
                VALUES    (1,1,''),
                          (2,2,''),
                          (3,3,''),
                          (4,4,''),
                          (5,5,''),
                          (6,6,'');
*/

INSERT INTO `events`    (`event_start`,
                         `event_end`,
                         `event_title`,
                         `event_content`)
                VALUES  ('2023-05-15-00-00-00',
                         '2023-05-30-23-59-59',
                         '対中間考査　特別企画',
'＜個人戦＞
期間中は獲得RPが２倍に増加！！
期間終了時にレートが「SS+」以上でバッジ獲得！'),
                         ('2023-06-15-00-00-00',
                         '2023-06-30-23-59-59',
                         'プライムデー　特別企画',
'＜個人戦＞
期間中は獲得RPが1１．５倍に増加！！
期間終了時にレートが「S+」以上でバッジ獲得！'),
                         ('2023-07-15-00-00-00',
                         '2023-07-30-23-59-59',
                         '対期末考査　特別企画',
'＜個人戦＞
期間中は獲得RPが１．２倍に増加！！
期間終了時にレートが「A+」以上でバッジ獲得！'),
                         ('2023-08-15-00-00-00',
                         '2023-08-30-23-59-59',
                         '夏休み　特別企画',
'＜個人戦＞
期間中は獲得RPが１．７７倍に増加！！
期間終了時にレートが「SS」以上でバッジ獲得！'),
                         ('2023-09-15-00-00-00',
                         '2023-09-30-23-59-59',
                         '情報処理対策　特別企画',
'＜個人戦＞
期間中は獲得RPが２倍に増加！！
期間終了時にレートが「S-」以上でバッジ獲得！'),
                         ('2023-10-15-00-00-00',
                         '2023-10-30-23-59-59',
                         '対中間考査　特別企画',
'＜個人戦＞
期間中は獲得RPが２倍に増加！！
期間終了時にレートが「S-」以上でバッジ獲得！');